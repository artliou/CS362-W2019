        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Card Test Random: Adventurer Card
        -:    2: *  Card test/random test for the Adventurer Card
        -:    3: *  Card Effect: Reveal cards from deck until 2 treasure is revealed, add the treasure cards to hand, discard the revealed cards.
        -:    4: * 
        -:    5: * randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:    6: * gcc -o randomtestadventurer -g  randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:    7: */
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:#include <math.h>
        -:   16:#include <time.h>
        -:   17:
        -:   18:#define TESTCARD "adventurer"
        -:   19:
function main called 4 returned 100% blocks executed 92%
        -:   20:int main() {
        4:   21:    int pass = 1;
        -:   22:    struct gameState G, testState;
        -:   23:    // int k[10] = {
        -:   24:    //     adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall
        -:   25:    // };
        -:   26:
        4:   27:    int x = 1000;
        -:   28:    int i, n, r, playedCard;
        4:   29:    int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   30:    int thisPlayer;
        4:   31:    int addedCards = 2;
        -:   32:    int coin, expectedCoin;
        -:   33:    int totalCards, expectedCards;
        -:   34:
        -:   35:    //initialize game state
        -:   36:    //initializeGame(numbPlayers, k, randSeed, &G);
        -:   37:
        -:   38:    //initialize random
        4:   39:    srand(time(NULL));
        4:   40:	printf("Random Testing for Card: Adventurer\n");
     8008:   41:    for (i = 0; i < x; i++){
branch  0 taken 99%
branch  1 taken 1%
 52608000:   42:        printf("\nTest Case: %d\n", i);
branch  0 taken 99%
branch  1 taken 1%
 26300000:   43:        for (n = 0; n < sizeof(struct gameState) / sizeof(int); n++) {
 26300000:   44:            ((int*)&G)[n] = rand() % 128;
        -:   45:        }
     4000:   46:
     4000:   47:        G.numPlayers = (rand() % 3)+2;
     4000:   48:        G.whoseTurn = rand() % G.numPlayers;
     4000:   49:        thisPlayer = whoseTurn(&G);
     4000:   50:        G.handCount[thisPlayer] = (rand() % (MAX_HAND/2))+1;
     4000:   51:        G.deckCount[thisPlayer] = (rand() % (MAX_DECK/2))+1;
     4000:   52:        G.discardCount[thisPlayer] = (rand() % (MAX_DECK/2))+1;
  1024898:   53:        handPos = (rand() % G.handCount[thisPlayer]);
branch  0 taken 99%
branch  1 taken 1%
   508449:   54:        for (n = 0; n < G.handCount[thisPlayer]; n++) {
   508449:   55:            r = (rand() % 2);
branch  0 taken 50%
branch  1 taken 50%
   254667:   56:            if (r == 0) {
   254667:   57:                G.hand[thisPlayer][n] = copper;
   253782:   58:            } else {
        -:   59:                G.hand[thisPlayer][n] = estate;
   508449:   60:            }
  1012674:   61:        }
branch  0 taken 99%
branch  1 taken 1%
   502337:   62:        for (n = 0; n < G.deckCount[thisPlayer]; n++) {
   502337:   63:            r = (rand() % 2);
branch  0 taken 50%
branch  1 taken 50%
   250711:   64:            if (r == 0) {
   250711:   65:                G.deck[thisPlayer][n] = copper;
   251626:   66:            } else {
        -:   67:                G.deck[thisPlayer][n] = estate;
   502337:   68:            }
        -:   69:        }
     4000:   70:        //Copy game State to Compare
        -:   71:        memcpy(&testState, &G, sizeof(struct gameState));
     4000:   72:
        -:   73:        playedCard = cardEffect(adventurer, choice1, choice2, choice3, &testState, handPos, &bonus);
        -:   74:        
     4000:   75:        //Invalid Return Value        
branch  0 taken 0%
branch  1 taken 100%
    #####:   76:        if (playedCard != 0) {
    #####:   77:            printf("Playing Card Failed");
    #####:   78:            pass = 0;
        -:   79:        };
        -:   80:        
     4000:   81:        //Incorrect hand count
branch  0 taken 99%
branch  1 taken 1%
     3997:   82:        if (testState.handCount[thisPlayer] != G.handCount[thisPlayer]+addedCards){
     3997:   83:            pass = 0;
     3997:   84:            printf("Hand Count: %d, Expected: %d \n\n", testState.handCount[thisPlayer], G.handCount[thisPlayer]+addedCards);
        -:   85:        }
     4000:   86:
     4000:   87:        totalCards = G.deckCount[thisPlayer] + G.discardCount[thisPlayer];
     4000:   88:        expectedCards = testState.deckCount[thisPlayer] + testState.discardCount[thisPlayer];
branch  0 taken 99%
branch  1 taken 1%
     3999:   89:        if (expectedCards != totalCards - addedCards) {
     3999:   90:            pass = 0;
     3999:   91:            printf("Total Cards: %d, Expected: %d \n\n", expectedCards, totalCards-addedCards);
        -:   92:        };
     4000:   93:
     4000:   94:        coin = 0;
  1024898:   95:        n = 0;
branch  0 taken 99%
branch  1 taken 1%
   508449:   96:        while (n < numHandCards(&G)) {
branch  0 taken 50%
branch  1 taken 50%
   254667:   97:            if (handCard(n, &G) == copper) {
   508449:   98:                coin++;
branch  0 taken 0%
branch  1 taken 100%
    #####:   99:            } else if (handCard(n, &G) == silver) {
   253782:  100:                coin += 2;
branch  0 taken 0%
branch  1 taken 100%
    #####:  101:            } else if (handCard(n, &G) == gold) {
    #####:  102:                coin += 3;
   508449:  103:            }
        -:  104:            n++;
        -:  105:        }
     4000:  106:
     4000:  107:        expectedCoin = 0;
  1064846:  108:        n = 0;
branch  0 taken 99%
branch  1 taken 1%
   528423:  109:        while (n < numHandCards(&testState)) {
branch  0 taken 51%
branch  1 taken 49%
   268499:  110:            if (handCard(n, &testState) == copper) {
   528423:  111:                expectedCoin++;
branch  0 taken 1%
branch  1 taken 99%
       18:  112:            } else if (handCard(n, &testState) == silver) {
   259924:  113:                expectedCoin += 2;
branch  0 taken 1%
branch  1 taken 99%
        2:  114:            } else if (handCard(n, &testState) == gold) {
        2:  115:                expectedCoin += 3;
   528423:  116:            }
        -:  117:            n++;
     4000:  118:        };
branch  0 taken 4%
branch  1 taken 96%
      152:  119:        if (expectedCoin < coin + 2) {
      152:  120:            pass = 0;
      152:  121:            printf("Coin Count: %d, Expected Coin Count: >= %d \n\n", expectedCoin, coin + 2);
     4000:  122:        }
        -:  123:    }
        -:  124:    //End For Loop and Return Results
        4:  125:    if (pass) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  126:        printf(">>>>>TEST SUCCESSFULLY COMPLETED <<<<<\n");
    #####:  127:    } else{
        4:  128:        printf(">>>>>TEST FAILED<<<<<\n");
        -:  129:    }
        4:  130:	printf("\n >>>>> Random Card Test Complete - Adventurer <<<<<\n\n");
        4:  131:    return 0;
        -:  132:}
