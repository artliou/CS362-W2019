        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
       60:   12:    return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1140:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      600:   65:        }
       60:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        6:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        6:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      114:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
       12:  116:		    state->supplyCount[i] = 8; 
       12:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       12:  119:		}
        -:  120:	      else
        -:  121:		{
       48:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      870:  130:	}
        -:  131:
      120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
       36:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
       84:  150:	}
       12:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       12:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       12:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
      162:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
       30:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        7:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       13:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       13:  208:  if (state->deckCount[player] < 1)
        1:  209:    return -1;
       12:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      264:  213:  while (state->deckCount[player] > 0) {
      120:  214:    card = floor(Random() * state->deckCount[player]);
      120:  215:    newDeck[newDeckPos] = state->deck[player][card];
      120:  216:    newDeckPos++;
      884:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      322:  218:      state->deck[player][i] = state->deck[player][i+1];
      322:  219:    }
      120:  220:    state->deckCount[player]--;
        -:  221:  }
      264:  222:  for (i = 0; i < newDeckPos; i++) {
      120:  223:    state->deck[player][i] = newDeck[i];
      120:  224:    state->deckCount[player]++;
      120:  225:  }
        -:  226:
       12:  227:  return 0;
       13:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:	
    #####:  268:  return 0;
    #####:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    #####:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        7:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    #####:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    #####:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    #####:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        4:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
        2:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
        1:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
        1:  400:  j = 0;
       52:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
       25:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
        3:  405:	  j++;
        3:  406:	}
       25:  407:    }
        1:  408:  if ( j >= 3)
        -:  409:    {
        1:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        2:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    #####:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
    #####:  483:	}
    #####:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
    #####:  494:	}
    #####:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
    #####:  504:	}
    #####:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
    #####:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
    #####:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
       48:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
        2:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
    #####:  535:    }
        -:  536:
        1:  537:    state->deckCount[player] = state->discardCount[player];
        1:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        1:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        1:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        1:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        1:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        1:  558:    if (deckCounter == 0)
        1:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
    #####:  564:  }
        -:  565:
        -:  566:  else{
       47:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       47:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       47:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       47:  575:    state->deckCount[player]--;
       47:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       47:  579:  return 0;
       48:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
        6:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        2:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        6:  643:}
        -:  644:
        -:  645:/***
        -:  646:* Assignment 2 Q3 - Code Refactor for 5 Cards
        -:  647:***/
        -:  648:
        -:  649:// Smithy Card
        -:  650:int playCardSmithy(struct gameState *state, int currentPlayer, int handPos) 
        -:  651:{
        -:  652:  int i;
        -:  653:  //+3 Cards
       20:  654:  for (i = 0; i < 4; i++)
        -:  655:  {
        8:  656:    drawCard(currentPlayer, state);
        8:  657:	}			
        -:  658:  //discard card from hand
        2:  659:  discardCard(handPos, currentPlayer, state, 0);
        2:  660:  return 0;
        -:  661:}
        -:  662:
        -:  663:// Adventurer Card
        -:  664:int playCardAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[], int z)
        -:  665:{
        -:  666:  int cardDrawn;
        6:  667:  while(drawntreasure<2) {
        2:  668:    if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  669:      shuffle(currentPlayer, state);
    #####:  670:    }
        2:  671:    drawCard(currentPlayer, state);
        2:  672:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  673:    // if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  674:    if (cardDrawn == copper || cardDrawn == silver)
        2:  675:      drawntreasure++;
        -:  676:    else {
    #####:  677:      temphand[z]=cardDrawn;
    #####:  678:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  679:      z++;
        -:  680:    }
        -:  681:  }
        2:  682:  while(z-1>=0) {
    #####:  683:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  684:	  z=z-1;
        -:  685:  }
        1:  686:  return 0;
        -:  687:}
        -:  688:// Village Card
        -:  689:int playCardVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  690:{
        -:  691:  //+1 Card
        3:  692:  drawCard(currentPlayer, state);
        -:  693:  
        -:  694:  //+2 Actions
        3:  695:  state->numActions = state->numActions + 3;
        -:  696:  
        -:  697:  //discard played card from hand
        3:  698:  discardCard(handPos, currentPlayer, state, 0);
        3:  699:  return 0;
        -:  700:}
        -:  701:
        -:  702:// Remodel Card
        -:  703:int playCardRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) 
        -:  704:{
        -:  705:    int i;
        -:  706:    int j;
        1:  707:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        1:  708:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  709:	  {
    #####:  710:	    return -1;
        -:  711:	  }
        1:  712:    gainCard(choice2, state, 0, currentPlayer);
        -:  713:
        -:  714:    //discard card from hand
        1:  715:    discardCard(handPos, currentPlayer, state, 0);
        -:  716:
        -:  717:    //discard trashed card
        2:  718:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  719:  	{
        1:  720:	    if (state->hand[currentPlayer][i] == j)
        -:  721:        {
        1:  722:          discardCard(i, currentPlayer, state, 0);			
        1:  723:          break;
        -:  724:        }
    #####:  725:    }
        1:  726:  return 0;
        1:  727:}
        -:  728:
        -:  729:// Gardens Card
        -:  730:int playCardGardens(int currentPlayer, struct gameState *state)
        -:  731:{
    #####:  732:  drawCard(currentPlayer, state);
    #####:  733:  return -1;
        -:  734:}
        -:  735:// End Assignment2 Q3: User Refactor. 
        -:  736:
        -:  737:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  738:{
        -:  739:  int i;
        -:  740:  int j;
        -:  741:  int k;
        -:  742:  int x;
        -:  743:  int index;
        4:  744:  int currentPlayer = whoseTurn(state);
        4:  745:  int nextPlayer = currentPlayer + 1;
        -:  746:
        4:  747:  int tributeRevealedCards[2] = {-1, -1};
        -:  748:  int temphand[MAX_HAND];// moved above the if statement
        4:  749:  int drawntreasure=0;
        -:  750:  // int cardDrawn;
        4:  751:  int z = 0;// this is the counter for the temp hand
        4:  752:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  753:    nextPlayer = 0;
    #####:  754:  }
        -:  755:  
        -:  756:	
        -:  757:  //uses switch to select card and perform actions
       11:  758:  switch( card ) 
        -:  759:    {
        -:  760:    case adventurer:
        1:  761:      playCardAdventurer(drawntreasure, state, currentPlayer, &temphand[z], z);
        -:  762:      // while(drawntreasure<2) {
        -:  763:      //   if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
        -:  764:      //     shuffle(currentPlayer, state);
        -:  765:      //   }
        -:  766:      //   drawCard(currentPlayer, state);
        -:  767:      //   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  768:      //   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  769:      //     drawntreasure++;
        -:  770:      //   else {
        -:  771:      //     temphand[z]=cardDrawn;
        -:  772:      //     state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  773:      //     z++;
        -:  774:      //   }
        -:  775:      // }
        -:  776:      // while(z-1>=0) {
        -:  777:      //   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  778:      //   z=z-1;
        -:  779:      // }
        -:  780:      // return 0;
        -:  781:			
        -:  782:    case council_room:
        -:  783:      //+4 Cards
       10:  784:      for (i = 0; i < 4; i++)
        -:  785:	{
        4:  786:	  drawCard(currentPlayer, state);
        4:  787:	}
        -:  788:			
        -:  789:      //+1 Buy
        1:  790:      state->numBuys++;
        -:  791:			
        -:  792:      //Each other player draws a card
        6:  793:      for (i = 0; i < state->numPlayers; i++)
        -:  794:	{
        2:  795:	  if ( i != currentPlayer )
        -:  796:	    {
        1:  797:	      drawCard(i, state);
        1:  798:	    }
        2:  799:	}
        -:  800:			
        -:  801:      //put played card in played card pile
        1:  802:      discardCard(handPos, currentPlayer, state, 0);
        -:  803:			
        1:  804:      return 0;
        -:  805:			
        -:  806:    case feast:
        -:  807:      //gain card with cost up to 5
        -:  808:      //Backup hand
    #####:  809:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  810:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  811:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  812:      }
        -:  813:      //Backup hand
        -:  814:
        -:  815:      //Update Coins for Buy
    #####:  816:      updateCoins(currentPlayer, state, 5);
    #####:  817:      x = 1;//Condition to loop on
    #####:  818:      while( x == 1) {//Buy one card
    #####:  819:	if (supplyCount(choice1, state) <= 0){
        -:  820:	  if (DEBUG)
        -:  821:	    printf("None of that card left, sorry!\n");
        -:  822:
        -:  823:	  if (DEBUG){
        -:  824:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  825:	  }
    #####:  826:	}
    #####:  827:	else if (state->coins < getCost(choice1)){
    #####:  828:	  printf("That card is too expensive!\n");
        -:  829:
        -:  830:	  if (DEBUG){
        -:  831:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  832:	  }
    #####:  833:	}
        -:  834:	else{
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  838:	  }
        -:  839:
    #####:  840:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  841:	  x = 0;//No more buying cards
        -:  842:
        -:  843:	  if (DEBUG){
        -:  844:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  845:	  }
        -:  846:
        -:  847:	}
        -:  848:      }     
        -:  849:
        -:  850:      //Reset Hand
    #####:  851:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  852:	state->hand[currentPlayer][i] = temphand[i];
    #####:  853:	temphand[i] = -1;
    #####:  854:      }
        -:  855:      //Reset Hand
        -:  856:      			
    #####:  857:      return 0;
        -:  858:			
        -:  859:    case gardens:
        -:  860:      // playCardGardens();
    #####:  861:      playCardGardens(currentPlayer, state);
        -:  862:			
        -:  863:    case mine:
    #####:  864:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:		
    #####:  871:      if (choice2 > treasure_map || choice2 < curse)
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 2, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);			
    #####:  892:	      break;
        -:  893:	    }
    #####:  894:	}
        -:  895:			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case remodel:
        1:  899:      playCardRemodel(state, currentPlayer, choice1, choice2, handPos);
        -:  900:      //     j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  901:
        -:  902:      //     if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  903:      // {
        -:  904:      //   return -1;
        -:  905:      // }
        -:  906:
        -:  907:      //     gainCard(choice2, state, 0, currentPlayer);
        -:  908:
        -:  909:      //     //discard card from hand
        -:  910:      //     discardCard(handPos, currentPlayer, state, 0);
        -:  911:
        -:  912:      //     //discard trashed card
        -:  913:      //     for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  914:      // {
        -:  915:      //   if (state->hand[currentPlayer][i] == j)
        -:  916:      //     {
        -:  917:      //       discardCard(i, currentPlayer, state, 0);			
        -:  918:      //       break;
        -:  919:      //     }
        -:  920:      // }
        -:  921:      //     return 0;
        -:  922:		
        -:  923:    case smithy:
        2:  924:      playCardSmithy(state, currentPlayer, handPos);
        -:  925:      // //+3 Cards
        -:  926:      // for (i = 0; i < 3; i++)
        -:  927:      // {
        -:  928:      //   drawCard(currentPlayer, state);
        -:  929:      // }			
        -:  930:      // //discard card from hand
        -:  931:      // discardCard(handPos, currentPlayer, state, 0);
        -:  932:      // return 0;
        -:  933:		
        -:  934:    case village:
        3:  935:      playCardVillage(state, currentPlayer, handPos);
        -:  936:      // //+1 Card
        -:  937:      // drawCard(currentPlayer, state);
        -:  938:			
        -:  939:      // //+2 Actions
        -:  940:      // state->numActions = state->numActions + 2;
        -:  941:			
        -:  942:      // //discard played card from hand
        -:  943:      // discardCard(handPos, currentPlayer, state, 0);
        -:  944:      // return 0;
        -:  945:		
        -:  946:    case baron:
        3:  947:      state->numBuys++;//Increase buys by 1!
        3:  948:      if (choice1 > 0){//Boolean true or going to discard an estate
        1:  949:	int p = 0;//Iterator for hand!
        1:  950:	int card_not_discarded = 1;//Flag for discard set!
        4:  951:	while(card_not_discarded){
        1:  952:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        1:  953:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  954:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  955:	    state->discardCount[currentPlayer]++;
       14:  956:	    for (;p < state->handCount[currentPlayer]; p++){
        6:  957:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        6:  958:	    }
        1:  959:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  960:	    state->handCount[currentPlayer]--;
        1:  961:	    card_not_discarded = 0;//Exit the loop
        1:  962:	  }
    #####:  963:	  else if (p > state->handCount[currentPlayer]){
        -:  964:	    if(DEBUG) {
        -:  965:	      printf("No estate cards in your hand, invalid choice\n");
        -:  966:	      printf("Must gain an estate if there are any\n");
        -:  967:	    }
    #####:  968:	    if (supplyCount(estate, state) > 0){
    #####:  969:	      gainCard(estate, state, 0, currentPlayer);
    #####:  970:	      state->supplyCount[estate]--;//Decrement estates
    #####:  971:	      if (supplyCount(estate, state) == 0){
    #####:  972:		isGameOver(state);
    #####:  973:	      }
    #####:  974:	    }
    #####:  975:	    card_not_discarded = 0;//Exit the loop
    #####:  976:	  }
        -:  977:			    
        -:  978:	  else{
    #####:  979:	    p++;//Next card
        -:  980:	  }
        -:  981:	}
        1:  982:      }
        -:  983:			    
        -:  984:      else{
        2:  985:	if (supplyCount(estate, state) > 0){
        2:  986:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  987:	  state->supplyCount[estate]--;//Decrement Estates
        2:  988:	  if (supplyCount(estate, state) == 0){
    #####:  989:	    isGameOver(state);
    #####:  990:	  }
        2:  991:	}
        -:  992:      }
        -:  993:	    
        -:  994:      
        3:  995:      return 0;
        -:  996:		
        -:  997:    case great_hall:
        -:  998:      //+1 Card
    #####:  999:      drawCard(currentPlayer, state);
        -: 1000:			
        -: 1001:      //+1 Actions
    #####: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case minion:
        -: 1009:      //+1 action
    #####: 1010:      state->numActions++;
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:			
    #####: 1015:      if (choice1)		//+2 coins
        -: 1016:	{
    #####: 1017:	  state->coins = state->coins + 2;
    #####: 1018:	}
        -: 1019:			
    #####: 1020:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1021:	{
        -: 1022:	  //discard hand
    #####: 1023:	  while(numHandCards(state) > 0)
        -: 1024:	    {
    #####: 1025:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1026:	    }
        -: 1027:				
        -: 1028:	  //draw 4
    #####: 1029:	  for (i = 0; i < 4; i++)
        -: 1030:	    {
    #####: 1031:	      drawCard(currentPlayer, state);
    #####: 1032:	    }
        -: 1033:				
        -: 1034:	  //other players discard hand and redraw if hand size > 4
    #####: 1035:	  for (i = 0; i < state->numPlayers; i++)
        -: 1036:	    {
    #####: 1037:	      if (i != currentPlayer)
        -: 1038:		{
    #####: 1039:		  if ( state->handCount[i] > 4 )
        -: 1040:		    {
        -: 1041:		      //discard hand
    #####: 1042:		      while( state->handCount[i] > 0 )
        -: 1043:			{
    #####: 1044:			  discardCard(handPos, i, state, 0);
        -: 1045:			}
        -: 1046:							
        -: 1047:		      //draw 4
    #####: 1048:		      for (j = 0; j < 4; j++)
        -: 1049:			{
    #####: 1050:			  drawCard(i, state);
    #####: 1051:			}
    #####: 1052:		    }
    #####: 1053:		}
    #####: 1054:	    }
        -: 1055:				
    #####: 1056:	}
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case steward:
    #####: 1060:      if (choice1 == 1)
        -: 1061:	{
        -: 1062:	  //+2 cards
    #####: 1063:	  drawCard(currentPlayer, state);
    #####: 1064:	  drawCard(currentPlayer, state);
    #####: 1065:	}
    #####: 1066:      else if (choice1 == 2)
        -: 1067:	{
        -: 1068:	  //+2 coins
    #####: 1069:	  state->coins = state->coins + 2;
    #####: 1070:	}
        -: 1071:      else
        -: 1072:	{
        -: 1073:	  //trash 2 cards in hand
    #####: 1074:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1075:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1076:	}
        -: 1077:			
        -: 1078:      //discard card from hand
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case tribute:
    #####: 1083:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1084:	if (state->deckCount[nextPlayer] > 0){
    #####: 1085:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1086:	  state->deckCount[nextPlayer]--;
    #####: 1087:	}
    #####: 1088:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1089:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1090:	  state->discardCount[nextPlayer]--;
    #####: 1091:	}
        -: 1092:	else{
        -: 1093:	  //No Card to Reveal
        -: 1094:	  if (DEBUG){
        -: 1095:	    printf("No cards to reveal\n");
        -: 1096:	  }
        -: 1097:	}
    #####: 1098:      }
        -: 1099:	    
        -: 1100:      else{
    #####: 1101:	if (state->deckCount[nextPlayer] == 0){
    #####: 1102:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1103:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1104:	    state->deckCount[nextPlayer]++;
    #####: 1105:	    state->discard[nextPlayer][i] = -1;
    #####: 1106:	    state->discardCount[nextPlayer]--;
    #####: 1107:	  }
        -: 1108:			    
    #####: 1109:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1110:	} 
    #####: 1111:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1112:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1113:	state->deckCount[nextPlayer]--;
    #####: 1114:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1115:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1116:	state->deckCount[nextPlayer]--;
        -: 1117:      }    
        -: 1118:		       
    #####: 1119:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1120:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1121:	state->playedCardCount++;
    #####: 1122:	tributeRevealedCards[1] = -1;
    #####: 1123:      }
        -: 1124:
    #####: 1125:      for (i = 0; i <= 2; i ++){
    #####: 1126:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1127:	  state->coins += 2;
    #####: 1128:	}
        -: 1129:		    
    #####: 1130:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1131:	  drawCard(currentPlayer, state);
    #####: 1132:	  drawCard(currentPlayer, state);
    #####: 1133:	}
        -: 1134:	else{//Action Card
    #####: 1135:	  state->numActions = state->numActions + 2;
        -: 1136:	}
    #####: 1137:      }
        -: 1138:	    
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case ambassador:
    #####: 1142:      j = 0;		//used to check if player has enough cards to discard
        -: 1143:
    #####: 1144:      if (choice2 > 2 || choice2 < 0)
        -: 1145:	{
    #####: 1146:	  return -1;				
        -: 1147:	}
        -: 1148:
    #####: 1149:      if (choice1 == handPos)
        -: 1150:	{
    #####: 1151:	  return -1;
        -: 1152:	}
        -: 1153:
    #####: 1154:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1155:	{
    #####: 1156:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1157:	    {
    #####: 1158:	      j++;
    #####: 1159:	    }
    #####: 1160:	}
    #####: 1161:      if (j < choice2)
        -: 1162:	{
    #####: 1163:	  return -1;				
        -: 1164:	}
        -: 1165:
        -: 1166:      if (DEBUG) 
        -: 1167:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1168:
        -: 1169:      //increase supply count for choosen card by amount being discarded
    #####: 1170:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1171:			
        -: 1172:      //each other player gains a copy of revealed card
    #####: 1173:      for (i = 0; i < state->numPlayers; i++)
        -: 1174:	{
    #####: 1175:	  if (i != currentPlayer)
        -: 1176:	    {
    #####: 1177:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1178:	    }
    #####: 1179:	}
        -: 1180:
        -: 1181:      //discard played card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1183:
        -: 1184:      //trash copies of cards returned to supply
    #####: 1185:      for (j = 0; j < choice2; j++)
        -: 1186:	{
    #####: 1187:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1188:	    {
    #####: 1189:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1190:		{
    #####: 1191:		  discardCard(i, currentPlayer, state, 1);
    #####: 1192:		  break;
        -: 1193:		}
    #####: 1194:	    }
    #####: 1195:	}			
        -: 1196:
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case cutpurse:
        -: 1200:
    #####: 1201:      updateCoins(currentPlayer, state, 2);
    #####: 1202:      for (i = 0; i < state->numPlayers; i++)
        -: 1203:	{
    #####: 1204:	  if (i != currentPlayer)
        -: 1205:	    {
    #####: 1206:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1207:		{
    #####: 1208:		  if (state->hand[i][j] == copper)
        -: 1209:		    {
    #####: 1210:		      discardCard(j, i, state, 0);
    #####: 1211:		      break;
        -: 1212:		    }
    #####: 1213:		  if (j == state->handCount[i])
        -: 1214:		    {
    #####: 1215:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1216:			{
        -: 1217:			  if (DEBUG)
        -: 1218:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1219:			}	
    #####: 1220:		      break;
        -: 1221:		    }		
    #####: 1222:		}
        -: 1223:					
    #####: 1224:	    }
        -: 1225:				
    #####: 1226:	}				
        -: 1227:
        -: 1228:      //discard played card from hand
    #####: 1229:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1230:
    #####: 1231:      return 0;
        -: 1232:
        -: 1233:		
        -: 1234:    case embargo: 
        -: 1235:      //+2 Coins
    #####: 1236:      state->coins = state->coins + 2;
        -: 1237:			
        -: 1238:      //see if selected pile is in play
    #####: 1239:      if ( state->supplyCount[choice1] == -1 )
        -: 1240:	{
    #####: 1241:	  return -1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //add embargo token to selected supply pile
    #####: 1245:      state->embargoTokens[choice1]++;
        -: 1246:			
        -: 1247:      //trash card
    #####: 1248:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1249:      return 0;
        -: 1250:		
        -: 1251:    case outpost:
        -: 1252:      //set outpost flag
    #####: 1253:      state->outpostPlayed++;
        -: 1254:			
        -: 1255:      //discard card
    #####: 1256:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1257:      return 0;
        -: 1258:		
        -: 1259:    case salvager:
        -: 1260:      //+1 buy
    #####: 1261:      state->numBuys++;
        -: 1262:			
    #####: 1263:      if (choice1)
        -: 1264:	{
        -: 1265:	  //gain coins equal to trashed card
    #####: 1266:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1267:	  //trash card
    #####: 1268:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1269:	}
        -: 1270:			
        -: 1271:      //discard card
    #####: 1272:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1273:      return 0;
        -: 1274:		
        -: 1275:    case sea_hag:
    #####: 1276:      for (i = 0; i < state->numPlayers; i++){
    #####: 1277:	if (i != currentPlayer){
    #####: 1278:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1279:	  state->discardCount[i]++;
    #####: 1280:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1281:	}
    #####: 1282:      }
    #####: 1283:      return 0;
        -: 1284:		
        -: 1285:    case treasure_map:
        -: 1286:      //search hand for another treasure_map
    #####: 1287:      index = -1;
    #####: 1288:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1289:	{
    #####: 1290:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1291:	    {
    #####: 1292:	      index = i;
    #####: 1293:	      break;
        -: 1294:	    }
    #####: 1295:	}
    #####: 1296:      if (index > -1)
        -: 1297:	{
        -: 1298:	  //trash both treasure cards
    #####: 1299:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1300:	  discardCard(index, currentPlayer, state, 1);
        -: 1301:
        -: 1302:	  //gain 4 Gold cards
    #####: 1303:	  for (i = 0; i < 4; i++)
        -: 1304:	    {
    #####: 1305:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1306:	    }
        -: 1307:				
        -: 1308:	  //return success
    #####: 1309:	  return 1;
        -: 1310:	}
        -: 1311:			
        -: 1312:      //no second treasure_map found in hand
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
    #####: 1316:  return -1;
        4: 1317:} //End Card Effect function
        -: 1318:
        -: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
        8: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
        8: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1327:      state->playedCardCount++;
        8: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
        8: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
        8: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
    #####: 1338:    }
        8: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
    #####: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
        8: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
        8: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
        8: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
        8: 1354:  return 0;
        -: 1355:}
        -: 1356:
        -: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
        3: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
    #####: 1376:    }
        3: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
    #####: 1381:    }
        -: 1382:  else
        -: 1383:    {
        3: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
        3: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
        3: 1391:  return 0;
        3: 1392:}
        -: 1393:
        -: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
        6: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
       72: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
       30: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
       24: 1406:	  state->coins += 1;
       24: 1407:	}
        6: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
    #####: 1411:	}
        6: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
    #####: 1415:	}	
       30: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
        6: 1419:  state->coins += bonus;
        -: 1420:
        6: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424://end of dominion.c
